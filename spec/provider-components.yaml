apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: clusterapi-controllers
  namespace: default
  labels:
    api: clusterapi
spec:
  replicas: 1
  template:
    metadata:
      labels:
        api: clusterapi
    spec:
      nodeSelector:
        node-role.kubernetes.io/master: ""
      tolerations:
      - effect: NoSchedule
        key: node-role.kubernetes.io/master
      - key: CriticalAddonsOnly
        operator: Exists
      - effect: NoExecute
        key: node.alpha.kubernetes.io/notReady
        operator: Exists
      - effect: NoExecute
        key: node.alpha.kubernetes.io/unreachable
        operator: Exists
      containers:
      - name: controller-manager
        image: gcr.io/k8s-cluster-api/controller-manager:0.0.7
        volumeMounts:
          - name: config
            mountPath: /etc/kubernetes
          - name: certs
            mountPath: /etc/ssl/certs
        command:
        - "./controller-manager"
        args:
        - --kubeconfig=/etc/kubernetes/admin.conf
        resources:
          requests:
            cpu: 100m
            memory: 20Mi
          limits:
            cpu: 100m
            memory: 30Mi
      - name: vsphere-machine-controller
        image: luoh/cluster-api-provider-vsphere:latest
        volumeMounts:
          - name: config
            mountPath: /etc/kubernetes
          - name: certs
            mountPath: /etc/ssl/certs
          - name: machines-stage
            mountPath: /tmp/cluster-api/machines
          - name: sshkeys
            mountPath: /root/.ssh/vsphere_tmp
            subPath: vsphere_tmp
          - name: sshkeys
            mountPath: /root/.ssh/vsphere_tmp.pub
            subPath: vsphere_tmp.pub
          - name: named-machines
            mountPath: /etc/named-machines
          - name: kubeadm
            mountPath: /usr/bin/kubeadm
        env:
          - name: NODE_NAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
        command:
        - "./vsphere-machine-controller"
        args:
        - --kubeconfig=/etc/kubernetes/admin.conf
        - --namedmachines=/etc/named-machines/vsphere_named_machines.yaml
        resources:
          requests:
            cpu: 200m
            memory: 200Mi
          limits:
            cpu: 400m
            memory: 500Mi
      volumes:
      - name: config
        hostPath:
          path: /etc/kubernetes
      - name: certs
        hostPath:
          path: /etc/ssl/certs
      - name: machines-stage
        emptyDir: {}
      - name: sshkeys
        secret:
          defaultMode: 0600
          secretName: sshkeys
      - name: named-machines
        configMap:
          name: named-machines
      - name: kubeadm
        hostPath:
          path: /usr/bin/kubeadm
---
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: sshkeys
  namespace: default
data:
  vsphere_tmp: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBb29sSHhTeFlrcVBzbmxQWFFuQ1pWN2M2bW5vQTk1N1lHZXlMQVE3Y0xzYlExU2UwCnBxblN5bExVQmR2WElUdk9KTFQzSGdvemtEaWhvVVhLVFZLVURQZ0pzbElmNUgxcFRrK2hEZ2NqUHorMHl5TjEKZTdFU01SOEVhR1prUlNUeGNYMVZ5QzYvWXkyVy8xUWI5MllZd093T0VkS2hSaEp5OE9vMnVmdHNlY1ZCRmVsZgpDbitZRzVhQkRYZ3p2VGxZMHNzdTVkMWxKVlZnanRaQm96OXBMcFVPcXlreFRuRTJoeU44NkFySE91ZlVHTHhaClNBNkZLNm5RT2ZFQXZrVGsyK0VJaTVTbU93ejNYWUtZd2QzQ3VsZVFIbXlBdzBmazMrTER6bS9za3JCWWN1WXEKSGszQjNkUXMvYnJFalhsRGtFMGxCdittK045R3RFMm1OK0s2TndJREFRQUJBb0lCQUNKWUQ2cENMSlVQdmpmVwpUMjNpalFSVDJ6WTVBV3RSVFNodEt4SVdLY0JZa2xmNEE5d1RsazdhSWFMN1NRSGt1VEpZYXI4V09MOEl1RjV6CmVNUE41eXEyWHBZbmRFVzdtanpKNXFZb0svSjVhNkpnNDdvM09Ealk3UDJDWlQyWENNMktSazMrVXNLS0o1WGMKRit5MnpoUTF6T05ITm55ditVbWVzK0dvbHN0RDVMdE9XVXlKbXd5QXp3MGhyVlhwOXlBOFBYaUVSakZZT0hBbwozZ2pkMmVzbktWNVdVei95VGJTYWNWMW1UVmhpRVZOVWJ6SkphbWkvVEQ1TUpaUGd1SkNvd251ZmRwbUh4M20rCk9rWXVCaHRGV1M0N3NuL2JEeExWN2VDK29DYzJWYlhacmFrVnByWlhNTUFLWnB3eCs4WmluUUVuTXpDa1gxMkcKSzBPT3E4RUNnWUVBMEdXaCtCeVJycTdIZWlNdDFyOWlJNnFtb0JzaHVyY2xyeHllcThCUEU4VENBcXIrcmw3RApYM0ZhelE3NkFVWmNyZXZxeURjcm12RXBiRmo3RlN3T2JXOUNFQ3B2UlgvbjNGN0lSS2h2WkJOTmJ5SXhrVktRCnJRVWZVRTNieC9OeUpXekdDYVdJTi91clFiaS9xQ2ZST25SdjFtOEVyQ2l2c2pHQ292RGwwNHNDZ1lFQXg2bmMKMWN0cXZXTnJsQXFxVEpWTFcydUU0S0xGSjVjdWVpQzBjSEFhYm1OeDhsQlVNQUJKd3RnY1NIbUlxWldicm01ZwpQRE12bFhKZmQwd0cyeWVkVVJoTVk0VU1NZnFlelMwUGNJK1hRYVJRUzRNRVdZK0ZzY0dIaXI3bjFUNk15Vm9qCm5JQm1tSmxKeElrL25BMm1hTW1xcWwxV2NiaUlCTitSQmxuaDJZVUNnWUJUR2hRcXNvbk5sTmpxOVpoVDZHR2sKUTJyS3NjY1RnL0U5RVRhYzJzVXQ1dXBPMGcxWlQyU3RiTEIrMFJnVTVoQVRNdDZmRkpFSTZsNVFYSE5Ua0F2NAp5OE1XV3pXZ0MwOVVhMStGTVgycDlLQ09UcDVoaXdFeVhiYU0rVjlKTHVVMzAxWnRobHI1cUJ3MHl3MXlhdDVlClp3d3FBSDltZjVzQWZnblFIQ3dwM1FLQmdRQ2NzZEZ2TkJKVUNiZCsycFBtUUhDQWtiUVp1NFJ3MnJRT0FxYTUKYXpGREd1WnRIZC9FUUNXak5ZbVUwMVNPaXF4QVM3MVk0Vzdob1g0TW1PejBoM1Z1RkZ5MjZjNjFWcFBVUUIzUwozODM4SlNFaThmS3krdkVZbk9KcjRBRC9tUFJTZlZ4ZlVXR3pOdkh1dlN2Zm85TEtnQ0poUzVrdzdIcExJTTJuCkoxa1pKUUtCZ1FDWmUxVTgwVFdiYkVwVTVmVjlVMnpTcVRMa0J4R281VUNQQThMMEZiS2htOWFIUUZUMG5UbWoKaHRGcTVmM2lwTUhjNDFVM0RScmVRK0txQVE2RUdlbzlrZUMvRkErdktxUXFKQVcrYlhUdVp1TmRLYzlYaUx2OAo1OFVJUHZEU1RTeVBYVU54ZlpBUE1aOG9NV09aNjEwMmp3RXQydXJVNHpXN1Z2RjhPZ1Zkdmc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
  vsphere_tmp.pub: c3NoLXJzYSBBQUFBQjNOemFDMXljMkVBQUFBREFRQUJBQUFCQVFDaWlVZkZMRmlTbyt5ZVU5ZENjSmxYdHpxYWVnRDNudGdaN0lzQkR0d3V4dERWSjdTbXFkTEtVdFFGMjljaE84NGt0UGNlQ2pPUU9LR2hSY3BOVXBRTStBbXlVaC9rZldsT1Q2RU9CeU0vUDdUTEkzVjdzUkl4SHdSb1ptUkZKUEZ4ZlZYSUxyOWpMWmIvVkJ2M1poakE3QTRSMHFGR0VuTHc2amE1KzJ4NXhVRVY2VjhLZjVnYmxvRU5lRE85T1ZqU3l5N2wzV1VsVldDTzFrR2pQMmt1bFE2cktURk9jVGFISTN6b0NzYzY1OVFZdkZsSURvVXJxZEE1OFFDK1JPVGI0UWlMbEtZN0RQZGRncGpCM2NLNlY1QWViSUREUitUZjRzUE9iK3lTc0ZoeTVpb2VUY0hkMUN6OXVzU05lVU9RVFNVRy82YjQzMGEwVGFZMzRybzMgbHVvaEBsdW9oLWEwMS52bXdhcmUuY29tCg==
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: named-machines
data:
  vsphere_named_machines.yaml: |-
    items:
    - machineName: standard-master
      machineHcl: |
        variable "vsphere_user" {}
        variable "vsphere_password" {}
        variable "vsphere_server" {}

        variable "datacenter" {}
        variable "datastore" {}
        variable "resource_pool" {}
        variable "num_cpus" {}
        variable "memory" {}
        variable "vm_template" {}
        variable "network" { default = "VM Network"}
        variable "disk_label" { default = "disk0" }
        variable "disk_size" { default = 10}
        variable "startup_script_path" {}

        variable "vm_name" {
          type = "string"
        }

        provider "vsphere" {
          version        = "~> 1.5.0"
          user           = "${var.vsphere_user}"
          password       = "${var.vsphere_password}"
          vsphere_server = "${var.vsphere_server}"

          # if you have a self-signed cert
          allow_unverified_ssl = true
        }

        provider "template" {
         version = "~> 1.0.0"
        }

        data "vsphere_datacenter" "dc" {
          name = "${var.datacenter}"
        }

        data "vsphere_datastore" "datastore" {
          name          = "${var.datastore}"
          datacenter_id = "${data.vsphere_datacenter.dc.id}"
        }

        data "vsphere_resource_pool" "pool" {
          name          = "${var.resource_pool}"
          datacenter_id = "${data.vsphere_datacenter.dc.id}"
        }

        data "vsphere_network" "network" {
          name          = "${var.network}"
          datacenter_id = "${data.vsphere_datacenter.dc.id}"
        }

        data "vsphere_virtual_machine" "template" {
          name          = "${var.vm_template}"
          datacenter_id = "${data.vsphere_datacenter.dc.id}"
        }

        data "template_file" "cloud_provider_config" {
          template = <<EOF
        [Global]
        datacenters = "$${datacenter}"
        insecure-flag = "1" #set to 1 if the vCenter uses a self-signed cert

        [VirtualCenter "$${vsphere_server}"]
                user = "$${user}"
                password = "$${password}"

        [Workspace]
                server = "$${vsphere_server}"
                datacenter = "$${datacenter}"
                folder = "$${resource_pool}"
                default-datastore = "$${datastore}"
                resourcepool-path = "$${resource_pool}"

        [Disk]
                scsicontrollertype = pvscsi

        [Network]
                public-network = "$${network}"
        EOF
          vars {
            vsphere_server = "${var.vsphere_server}"
            datacenter     = "${var.datacenter}"
            user           = "${var.vsphere_user}"
            password       = "${var.vsphere_password}"
            datastore      = "${var.datastore}"
            resource_pool  = "${var.resource_pool}"
            network        = "${var.network}"
          }
        }

        data "template_file" "user_data" {
          template = <<EOF
        #cloud-config
        write_files:
          - path: /tmp/master.sh
            permissions: '0755'
            encoding: base64
            content: |
              $${startup_script}
          - path: /etc/kubernetes/cloud-config/cloud-config.yaml
            permissions: '0600'
            encoding: base64
            content: |
              $${cloud_provider_config}
        runcmd:
          - /tmp/master.sh
        EOF
          vars {
            startup_script = "${base64encode(file(var.startup_script_path))}"
            cloud_provider_config = "${base64encode(data.template_file.cloud_provider_config.rendered)}"
          }
        }

        resource "vsphere_virtual_machine" "master" {
          name             = "${var.vm_name}"
          resource_pool_id = "${data.vsphere_resource_pool.pool.id}"
          datastore_id     = "${data.vsphere_datastore.datastore.id}"

          num_cpus         = "${var.num_cpus}"
          memory           = "${var.memory}"
          guest_id         = "${data.vsphere_virtual_machine.template.guest_id}"
          enable_disk_uuid = "true"

          scsi_type = "${data.vsphere_virtual_machine.template.scsi_type}"

          network_interface {
            network_id   = "${data.vsphere_network.network.id}"
            adapter_type = "${data.vsphere_virtual_machine.template.network_interface_types[0]}"
          }

          disk {
            label            = "${var.disk_label}"
            size             = "${max(var.disk_size, data.vsphere_virtual_machine.template.disks.0.size)}"
            eagerly_scrub    = "${data.vsphere_virtual_machine.template.disks.0.eagerly_scrub}"
            thin_provisioned = "${data.vsphere_virtual_machine.template.disks.0.thin_provisioned}"
          }

          clone {
            template_uuid = "${data.vsphere_virtual_machine.template.id}"
          }

          cdrom {
            client_device = true
          }

          vapp {
            properties {
              hostname = "${var.vm_name}"
              "user-data" = "${base64encode(data.template_file.user_data.rendered)}"
              "public-keys" = "${file("~/.ssh/vsphere_tmp.pub")}"
            }
          }
        }

        output "ip_address" {
          value = "${vsphere_virtual_machine.master.default_ip_address}"
        }
    - machineName: standard-node
      machineHcl: |
        variable "vsphere_user" {}
        variable "vsphere_password" {}
        variable "vsphere_server" {}

        variable "datacenter" {}
        variable "datastore" {}
        variable "resource_pool" {}
        variable "num_cpus" {}
        variable "memory" {}
        variable "vm_template" {}
        variable "network" { default = "VM Network"}
        variable "disk_label" { default = "disk0" }
        variable "disk_size" { default = 10}
        variable "startup_script_path" {}

        variable "vm_name" {
          type = "string"
        }

        provider "vsphere" {
          version        = "~> 1.5.0"
          user           = "${var.vsphere_user}"
          password       = "${var.vsphere_password}"
          vsphere_server = "${var.vsphere_server}"

          # if you have a self-signed cert
          allow_unverified_ssl = true
        }

        provider "template" {
         version = "~> 1.0.0"
        }

        data "vsphere_datacenter" "dc" {
          name = "${var.datacenter}"
        }

        data "vsphere_datastore" "datastore" {
          name          = "${var.datastore}"
          datacenter_id = "${data.vsphere_datacenter.dc.id}"
        }

        data "vsphere_resource_pool" "pool" {
          name          = "${var.resource_pool}"
          datacenter_id = "${data.vsphere_datacenter.dc.id}"
        }

        data "vsphere_network" "network" {
          name          = "${var.network}"
          datacenter_id = "${data.vsphere_datacenter.dc.id}"
        }

        data "vsphere_virtual_machine" "template" {
          name          = "${var.vm_template}"
          datacenter_id = "${data.vsphere_datacenter.dc.id}"
        }

        // Generate cloud-config for VM startup
        data "template_file" "user_data" {
          template = <<EOF
        #cloud-config
        write_files:
          - content: |
              $${startup_script}
            path: /tmp/node.sh
            permissions: '0755'
            encoding: base64
        runcmd:
          - /tmp/node.sh
        EOF
          vars {
            startup_script = "${base64encode(file(var.startup_script_path))}"
          }
        }

        resource "vsphere_virtual_machine" "node" {
          name             = "${var.vm_name}"
          resource_pool_id = "${data.vsphere_resource_pool.pool.id}"
          datastore_id     = "${data.vsphere_datastore.datastore.id}"

          num_cpus         = "${var.num_cpus}"
          memory           = "${var.memory}"
          guest_id         = "${data.vsphere_virtual_machine.template.guest_id}"
          enable_disk_uuid = "true"

          scsi_type = "${data.vsphere_virtual_machine.template.scsi_type}"

          network_interface {
            network_id   = "${data.vsphere_network.network.id}"
            adapter_type = "${data.vsphere_virtual_machine.template.network_interface_types[0]}"
          }

          disk {
            label            = "${var.disk_label}"
            size             = "${max(var.disk_size, data.vsphere_virtual_machine.template.disks.0.size)}"
            eagerly_scrub    = "${data.vsphere_virtual_machine.template.disks.0.eagerly_scrub}"
            thin_provisioned = "${data.vsphere_virtual_machine.template.disks.0.thin_provisioned}"
          }

          clone {
            template_uuid = "${data.vsphere_virtual_machine.template.id}"
          }

          cdrom {
            client_device = true
          }

          // These properties are defined in the Ubuntu cloud image OVA.
          vapp {
            properties {
              hostname = "${var.vm_name}"
              // This data has to be base64 encoded because OVF uses XML, and this
              // has to be a valid XML attribute. Cloud-init on the other side will
              // base64decode it.
              "user-data" = "${base64encode(data.template_file.user_data.rendered)}"
              "public-keys" = "${file("~/.ssh/vsphere_tmp.pub")}"
            }
          }
        }

        output "ip_address" {
          value = "${vsphere_virtual_machine.node.default_ip_address}"
        }
